{"ast":null,"code":"var _jsxFileName = \"/Users/elizabeth/cs124/lab2/todo-app/src/DataContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport App from \"./App\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataContainer(props) {\n  _s();\n\n  // state manipulates data\n  const [data, setData] = useState(props.data);\n  const [display, setDisplay] = useState(true);\n\n  function handleChange(taskID, field, value) {\n    console.log(taskID, field, value);\n    setData(data.map(taskItem => taskItem.taskId === taskID ? { ...taskItem,\n      [field]: value\n    } : taskItem));\n  }\n\n  function handleDelete() {\n    setData(data.filter(taskItem => !taskItem.isCompleted));\n  }\n\n  function handleUncompleted() {\n    setDisplay(!display);\n  }\n\n  function handlePlusClick() {\n    const newData = data.concat({\n      taskName: \"\",\n      taskId: generateUniqueID(),\n      isCompleted: false\n    });\n    setData(newData); // setEditedID(data.taskId); // how do we set editedID to a task item???\n  } // console.log(\"container is rendering\")\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      data: display ? data : data.filter(taskItem => !taskItem.isCompleted),\n      handleChange: handleChange,\n      handlePlusClick: handlePlusClick,\n      handleDelete: handleDelete,\n      handleUncompleted: handleUncompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataContainer, \"EP+Qp0rio2NAIGM1lal8+YoUq1A=\");\n\n_c = DataContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataContainer\");","map":{"version":3,"sources":["/Users/elizabeth/cs124/lab2/todo-app/src/DataContainer.js"],"names":["useState","App","generateUniqueID","DataContainer","props","data","setData","display","setDisplay","handleChange","taskID","field","value","console","log","map","taskItem","taskId","handleDelete","filter","isCompleted","handleUncompleted","handlePlusClick","newData","concat","taskName"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,gBAAR,QAA+B,8CAA/B;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACzC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACI,KAAK,CAACC,IAAP,CAAhC;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASS,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBC,KAApB,EAA2BC,KAA3B;AACAN,IAAAA,OAAO,CAACD,IAAI,CAACU,GAAL,CAASC,QAAQ,IAAIA,QAAQ,CAACC,MAAT,KAAoBP,MAApB,GAA6B,EAAC,GAAGM,QAAJ;AAAc,OAACL,KAAD,GAAQC;AAAtB,KAA7B,GAA0DI,QAA/E,CAAD,CAAP;AACH;;AAED,WAASE,YAAT,GAAuB;AACnBZ,IAAAA,OAAO,CAACD,IAAI,CAACc,MAAL,CAAYH,QAAQ,IAAI,CAACA,QAAQ,CAACI,WAAlC,CAAD,CAAP;AACH;;AAGD,WAASC,iBAAT,GAA4B;AACxBb,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH;;AAED,WAASe,eAAT,GAA2B;AACvB,UAAMC,OAAO,GAAGlB,IAAI,CAACmB,MAAL,CACZ;AACIC,MAAAA,QAAQ,EAAE,EADd;AAEIR,MAAAA,MAAM,EAAEf,gBAAgB,EAF5B;AAGIkB,MAAAA,WAAW,EAAE;AAHjB,KADY,CAAhB;AAOAd,IAAAA,OAAO,CAACiB,OAAD,CAAP,CARuB,CAUvB;AACH,GA9BwC,CAgCzC;;;AAEA,sBACI;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEhB,OAAO,GAAEF,IAAF,GAAOA,IAAI,CAACc,MAAL,CAAYH,QAAQ,IAAI,CAACA,QAAQ,CAACI,WAAlC,CAAzB;AACK,MAAA,YAAY,EAAEX,YADnB;AAEK,MAAA,eAAe,EAAEa,eAFtB;AAGK,MAAA,YAAY,EAAEJ,YAHnB;AAIK,MAAA,iBAAiB,EAAEG;AAJxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA3CuBlB,a;;KAAAA,a","sourcesContent":["import {useState} from \"react\";\nimport App from \"./App\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nexport default function DataContainer(props) {\n    // state manipulates data\n    const [data, setData] = useState(props.data);\n    const [display, setDisplay] = useState(true);\n\n    function handleChange(taskID, field, value) {\n        console.log(taskID, field, value);\n        setData(data.map(taskItem => taskItem.taskId === taskID ? {...taskItem, [field]:value}:taskItem))\n    }\n\n    function handleDelete(){\n        setData(data.filter(taskItem => !taskItem.isCompleted))\n    }\n\n\n    function handleUncompleted(){\n        setDisplay(!display);\n    }\n\n    function handlePlusClick() {\n        const newData = data.concat(\n            {\n                taskName: \"\",\n                taskId: generateUniqueID(),\n                isCompleted: false,\n            }\n        )\n        setData(newData);\n\n        // setEditedID(data.taskId); // how do we set editedID to a task item???\n    }\n\n    // console.log(\"container is rendering\")\n\n    return (\n        <div>\n            <App data={display? data:data.filter(taskItem => !taskItem.isCompleted)}\n                 handleChange={handleChange}\n                 handlePlusClick={handlePlusClick}\n                 handleDelete={handleDelete}\n                 handleUncompleted={handleUncompleted} />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}