{"ast":null,"code":"var _jsxFileName = \"/Users/elizabeth/cs124/lab2/todo-app/src/TaskItem.js\",\n    _s = $RefreshSig$();\n\nimport './DataContainer';\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskItem(props) {\n  _s();\n\n  const task = props.taskItem;\n  const taskInputRef = useRef(null);\n\n  function handleSetEdit(taskId) {\n    props.setEditedID(taskId);\n\n    if (taskInputRef.current) {\n      taskInputRef.current.focus();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: props.isCompleted,\n      id: props.taskId,\n      onChange: e => props.handleChange(task.taskId, \"isCompleted\", e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), task.taskId === props.editedID ? /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"newItem isEditing\",\n      type: \"text\",\n      value: props.taskName,\n      id: props.taskId,\n      onChange: e => props.handleChange(task.taskId, \"taskName\", e.target.value),\n      onBlur: () => props.setEditedID(null),\n      onKeyPress: e => e.key === \"Enter\" && props.setEditedID(null),\n      ref: taskInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"label\",\n      onClick: () => handleSetEdit(task.taskId),\n      children: task.taskName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 13\n  }, this);\n}\n\n_s(TaskItem, \"pv+Uyp0aB12RvUgHdS3EHayMST8=\");\n\n_c = TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Users/elizabeth/cs124/lab2/todo-app/src/TaskItem.js"],"names":["useRef","TaskItem","props","task","taskItem","taskInputRef","handleSetEdit","taskId","setEditedID","current","focus","isCompleted","e","handleChange","target","checked","editedID","taskName","value","key"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAAQA,MAAR,QAAqB,OAArB;;AAGA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACpC,QAAMC,IAAI,GAAGD,KAAK,CAACE,QAAnB;AACA,QAAMC,YAAY,GAAGL,MAAM,CAAC,IAAD,CAA3B;;AAGA,WAASM,aAAT,CAAuBC,MAAvB,EAA8B;AAC1BL,IAAAA,KAAK,CAACM,WAAN,CAAkBD,MAAlB;;AACA,QAAGF,YAAY,CAACI,OAAhB,EAAyB;AACrBJ,MAAAA,YAAY,CAACI,OAAb,CAAqBC,KAArB;AACH;AACJ;;AAED,sBAAQ;AAAA,4BACJ;AACI,MAAA,IAAI,EAAG,UADX;AAEI,MAAA,OAAO,EAAIR,KAAK,CAACS,WAFrB;AAGI,MAAA,EAAE,EAAIT,KAAK,CAACK,MAHhB;AAII,MAAA,QAAQ,EAAGK,CAAD,IACNV,KAAK,CAACW,YAAN,CAAmBV,IAAI,CAACI,MAAxB,EAAgC,aAAhC,EAA+CK,CAAC,CAACE,MAAF,CAASC,OAAxD;AALR;AAAA;AAAA;AAAA;AAAA,YADI,EAUAZ,IAAI,CAACI,MAAL,KAAgBL,KAAK,CAACc,QAAtB,gBACI;AACO,MAAA,SAAS,EAAG,mBADnB;AAEO,MAAA,IAAI,EAAG,MAFd;AAGO,MAAA,KAAK,EAAId,KAAK,CAACe,QAHtB;AAGgC,MAAA,EAAE,EAAIf,KAAK,CAACK,MAH5C;AAIO,MAAA,QAAQ,EAAGK,CAAD,IAAMV,KAAK,CAACW,YAAN,CAAmBV,IAAI,CAACI,MAAxB,EAAgC,UAAhC,EAA4CK,CAAC,CAACE,MAAF,CAASI,KAArD,CAJvB;AAKO,MAAA,MAAM,EAAI,MAAMhB,KAAK,CAACM,WAAN,CAAkB,IAAlB,CALvB;AAMO,MAAA,UAAU,EAAKI,CAAD,IAAKA,CAAC,CAACO,GAAF,KAAU,OAAV,IAAqBjB,KAAK,CAACM,WAAN,CAAkB,IAAlB,CAN/C;AAOO,MAAA,GAAG,EAAIH;AAPd;AAAA;AAAA;AAAA;AAAA,YADJ,gBASM;AAAK,MAAA,EAAE,EAAC,OAAR;AAAgB,MAAA,OAAO,EAAG,MAAMC,aAAa,CAACH,IAAI,CAACI,MAAN,CAA7C;AAAA,gBAA6DJ,IAAI,CAACc;AAAlE;AAAA;AAAA;AAAA;AAAA,YAnBN;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAsBH;;GAlCuBhB,Q;;KAAAA,Q","sourcesContent":["import './DataContainer'\nimport {useRef} from \"react\";\n\n\nexport default function TaskItem(props) {\n    const task = props.taskItem;\n    const taskInputRef = useRef(null);\n\n\n    function handleSetEdit(taskId){\n        props.setEditedID(taskId);\n        if(taskInputRef.current) {\n            taskInputRef.current.focus();\n        }\n    }\n\n    return (<div>\n        <input\n            type = \"checkbox\"\n            checked = {props.isCompleted}\n            id = {props.taskId}\n            onChange={(e) =>\n                props.handleChange(task.taskId, \"isCompleted\", e.target.checked)}\n        />\n\n        {\n            task.taskId === props.editedID?\n                <input\n                       className = \"newItem isEditing\"\n                       type = \"text\"\n                       value = {props.taskName} id = {props.taskId}\n                       onChange={(e)=> props.handleChange(task.taskId, \"taskName\", e.target.value)}\n                       onBlur = {() => props.setEditedID(null)}\n                       onKeyPress = {(e)=>e.key === \"Enter\" && props.setEditedID(null)}\n                       ref = {taskInputRef}/>\n                : <div id=\"label\" onClick ={() => handleSetEdit(task.taskId)}>{task.taskName}</div>\n        }\n    </div>)\n}"]},"metadata":{},"sourceType":"module"}